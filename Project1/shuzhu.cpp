# include<iostream>
using namespace std;

//数组
//每个元素都是相同的数据类型
//由连续内存位置组成


//int main()
//{
//	// 数组的三种定义形式
//	// 方式1：数据类型 数组名【数据长度】
//	
//	int a[5];
//	a[0] = 10;
//	a[1] = 20;
//	a[2] = 30;
//	a[3] = 40;
//	a[4] = 50;
//	//输出数组
//	cout << a[0] << endl;
//	cout << a[1] << endl;
//	cout << a[2] << endl;
//	cout << a[3] << endl;
//	cout << a[4] << endl;
//
//	//方式2：数据类型 数组名【数据长度】={值1，值2，....}
//
//	int a1[5] = { 10,20,30,40,50 };     //缺值会进行自动补0，假如只有10，20，30，最后输出10，20，30，0，0
//	//输出数组  利用for循环全部输出
//	for (int i = 0; i < 5; i++)
//	{
//		cout <<a1[i] <<endl;
//	}
//
//	//方式3：数据类型 数组名【】={值1，值2，....}  和第二种的区别就是不写数据长度，让电脑自己算
//
//	int a2[] = { 10,20,30,40,50,60,70,80,90 };
//
//	for (int i = 0; i < 9; i++)
//	{
//		cout << a2[i] << endl;
//	}
//
//	//一维数组名称用途   1、统计数组所占内存大小   2、获取数组内存首地址
//
//	int a3[] = { 0,1,2,3,4,5,6 };
//	cout << "a3的所占的内存大小：" << sizeof(a3) << endl;  //int类型占4个字节，一共7位所以占28个字节
//	cout << "a3[0]所占内存大小：" << sizeof(a3[0]) << endl;
//	cout << "a3的长度为：" << sizeof(a3) / sizeof(a3[0]) << endl;   //总共所占的字节除以单个所占的字节就可以得到所占用的长度了
//	cout << "a3首地址为：" << a3 << endl;
//	cout << "a3第一个元素的地址：" <<(int) & a3[0] << endl;   //&为取地址符号  利用int进行数据的强制转换
//	cout << "a3第二个元素地址为：" <<(int) &a3[1] << endl;    //两者中间差了4个字节
//
//
//	//二维数组
//	//二维数组四种定义方法
//	//方式一 
//	int a4[2][3];
//	a4[0][0] = 1;
//	a4[0][1] = 2;
//	a4[0][2] = 3;
//	a4[1][0] = 4;
//	a4[1][1] = 5;
//	a4[1][2] = 6;
//
//	cout << a4[0][0] << " ";
//	cout << a4[0][1] << " ";
//	cout << a4[0][2] << endl;
//	cout << a4[1][0] << " ";
//	cout << a4[1][1] << " ";
//	cout << a4[1][2] << endl;
//
//	//嵌套打印结果
//	for (int i = 0; i < 2; i++)   //外部循环打印行数
//	{
//		for (int j = 0; j < 3; j++)  //内部循环打印列数
//		{
//			cout << a4[i][j] << " ";
//		}
//		cout << endl;
//	}
//
//	//方式二  表示的更加直观  推荐采用第二次方式
//	int a5[2][3] = { {1,2,3},{4,5,6} };
//
//	for (int i = 0; i < 2; i++)   //外部循环打印行数
//	{
//		for (int j = 0; j < 3; j++)  //内部循环打印列数
//		{
//			cout << a5[i][j] << " ";
//		}
//		cout << endl;
//	}
//
//	//方式三
//	int a6[2][3] = { 1,2,3,4,5,6 };
//
//	for (int i = 0; i < 2; i++)   //外部循环打印行数
//	{
//		for (int j = 0; j < 3; j++)  //内部循环打印列数
//		{
//			cout << a6[i][j] << " ";
//		}
//		cout << endl;
//	}
//
//	//方式四  与方式三的区别为不写行数，不过电脑会自己计算行数
//	int a7[][3] = { 1,2,3,4,5,6 };
//
//	for (int i = 0; i < 2; i++)   //外部循环打印行数
//	{
//		for (int j = 0; j < 3; j++)  //内部循环打印列数
//		{
//			cout << a7[i][j] << " ";
//		}
//		cout << endl;
//	}
//
//	//二维数组名的用途 和一维数组名用途一样  1、查看所占内存大小 2、查看元素首地址
//	cout << "二维数组a7所占的内存大小："<<sizeof(a7) << endl;
//	cout << "二维数组a7第一行元素所占的内存大小：" << sizeof(a7[0]) << endl;
//	cout << "二维数组a7第一个元素所占的内存大小：" << sizeof(a7[0][0]) << endl;
//	cout << "二维数组的行数为：" << sizeof(a7) / sizeof(a7[0]) << endl;        //行数=所有的数据占的内存大小/第一行元素所占内存大小
//	cout << "二维数组的列数为：" << sizeof(a7[0]) / sizeof(a7[0][0]) << endl;  //列数=第一行所占的内存大小/第一个元素所占内存大小
//	cout << "二维数组a7的首地址为：" << (int)a7 << endl;   //(int)进行数据类型的强制转换
//	cout << "二维数组a7的第一行数据首地址：" << (int)a7[0] << endl;
//	cout << "二维数组a7的第二行数据首地址：" << (int)a7[1] << endl;
//	cout << "二维数组a7的第一个元素所在的地址：" << (int)&a7[0][0] << endl;  //访问具体元素的时候需要加取地址符号 &
//	cout << "二维数组a7的第二个元素所在的地址：" << (int)&a7[0][1] << endl;
//	
//
//	system("pause");
//	return 0;
//
//}